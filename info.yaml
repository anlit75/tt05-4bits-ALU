--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_4bits_alu_an.v
  top_module:  "tt_um_4bits_alu_an"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Ting-An Cheng"      # Your name
  title:        "4-bits ALU"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "This 4-bit ALU (Arithmetic Logic Unit) is a digital computation unit capable of executing 16 different operations."      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The 4-bits ALU (Arithmetic Logic Unit) implemented in this project performs 
      16 different operations on two 4-bit input values, A and B. 

      These operations include **addition, subtraction, multiplication, division, 
      bitwise operations, logical shifts, 2's complement, equality comparison, 
      and greater-than comparison**.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      To test the 4-bits ALU, follow these steps:

      1. Connect the inputs A[3:0] and B[3:0] to your desired 4-bit values.

      2. Set the opcode[3:0] to select the operation you want to perform.

      3. Ensure that the "ena" signal is high to enable the design.

      4. Provide a clock signal (clk) with a frequency of 10 MHz (clock_hz: 10000000).
      
      5. Make sure that the reset signal (rst_n) is low for normal operation.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - A[3]
    - A[2]
    - A[1]
    - A[0]
    - B[3]
    - B[2]
    - B[1]
    - B[0]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - alu_out[7]
    - alu_out[6]
    - alu_out[5]
    - alu_out[4]
    - alu_out[3]
    - alu_out[2]
    - alu_out[1]
    - alu_out[0]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Bidirectional bit 7 None
    - Bidirectional bit 6 None
    - Bidirectional bit 5 None
    - Bidirectional bit 4 None
    - opcode[3]
    - opcode[2]
    - opcode[1]
    - opcode[0]

# The following fields are optional
  tag:          "alu, calculator"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
